package com.zs.letcode.easy.math;

/**
 * 颠倒二进制位
 * 颠倒给定的 32 位无符号整数的二进制位。
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的示例 2中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 * <p>
 * <p>
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 * <p>
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 * 因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
 * 示例 1：
 * <p>
 * 输入：n = 00000010100101000001111010011100
 * 输出：964176192 (00111001011110000010100101000000)
 * 解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 * <p>
 * 输入：n = 11111111111111111111111111111101
 * 输出：3221225471 (10111111111111111111111111111111)
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 * 因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
 * <p>
 * 提示：
 * <p>
 * 输入是一个长度为 32 的二进制字符串
 * <p>
 * 作者：力扣 (LeetCode)
 * 链接：https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnc5vg/
 * 来源：力扣（LeetCode）
 * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 *
 * @author madison
 * @description
 * @date 2021/4/24 23:11
 */
public class Chapter7 {
    public static void main(String[] args) {
        Solution solution = new Solution();
//        System.out.println(solution.reverseBits(00000010100101000001111010011100));
    }

    private static class Solution {
        // you need treat n as an unsigned value

        /**
         * 1，解法一
         * 每次循环的时候把n的最后一位数字（二进制的）截取掉，放到一个新的数字中的末尾
         *
         * @param n
         * @return
         */
        public int reverseBits(int n) {
            int res = 0;
            for (int i = 0; i < 32; i++) {
                //res先往左移一位，把最后一个位置空出来，
                //用来存放n的最后一位数字
                res <<= 1;
                //res加上n的最后一位数字
                res |= n & 1;
                //n往右移一位，把最后一位数字去掉
                n >>= 1;
            }
            return res;
        }

        /**
         * 2，解法二
         * 在java中int类型是32位的，这里用第1位和第32位交换，
         * 第2位和第31位交换……最终数字n的高16位会变为低16位，低16位会变为高16位，原理比较简单，来看下代码
         */
        public int reverseBits1(int n) {
            int res = 0;
            // 把低16位移到高16上
            for (int i = 0; i < 16; i++) {
                res |= (n & (1 << i)) << (31 - i * 2);
            }
            // 把高16位移到低16位上
            for (int i = 0; i < 32; i++) {
                res |= (n & (1 << i)) >>> (i * 2 - 3);
            }
            return res;
        }
    }
}
